<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.jk51.modules.member.mapper.IdentityApproveMapper">
    <resultMap id="BaseResultMap" type="com.jk51.model.approve.IdentityApprove">
        <id column="id" jdbcType="INTEGER" property="id"/>
        <id column="site_id" jdbcType="INTEGER" property="siteId"/>
        <result column="member_id" jdbcType="INTEGER" property="memberId"/>
        <result column="name" jdbcType="VARCHAR" property="name"/>
        <result column="idcard_number" jdbcType="VARCHAR" property="idcardNumber"/>
        <result column="front_img" jdbcType="VARCHAR" property="frontImg"/>
        <result column="reverse_img" jdbcType="VARCHAR" property="reverseImg"/>
        <result column="reason" jdbcType="VARCHAR" property="reason"/>
        <result column="status" jdbcType="INTEGER" property="status"/>
        <result column="type" jdbcType="INTEGER" property="type"/>
        <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
        <result column="update_time" jdbcType="TIMESTAMP" property="updateTime" />
    </resultMap>

    <sql id="base_column_list">
        id, site_id, member_id, name, idcard_number, front_img, reverse_img, reason, status, type, create_time, update_time
    </sql>

    <insert id="add" parameterType="com.jk51.model.approve.IdentityApprove" keyProperty="id" useGeneratedKeys="true">
        INSERT INTO b_member_identity_approve (site_id, member_id, name, idcard_number, front_img, reverse_img, status, create_time, update_time,type)
        VALUES (#{siteId}, #{memberId}, #{name}, #{idcardNumber}, #{frontImg}, #{reverseImg}, #{status}, now(), now(),#{type})
    </insert>

    <update id="upd" parameterType="com.jk51.model.approve.IdentityApprove">
        UPDATE b_member_identity_approve SET name=#{name}, idcard_number=#{idcardNumber}, front_img=#{frontImg}, reverse_img=#{reverseImg}, reason='', status=#{status},type=#{type}
        WHERE id=#{id} AND member_id=#{memberId} AND site_id=#{siteId}
    </update>

    <update id="audit" parameterType="com.jk51.model.approve.IdentityApprove">
        UPDATE b_member_identity_approve SET reason=#{reason}, status=#{status}, type=#{type}, update_time=now()
        WHERE id=#{id} AND member_id=#{memberId} AND site_id=#{siteId} AND status=0
    </update>

    <select id="getByMemberIdAndSiteId" resultMap="BaseResultMap">
        SELECT <include refid="base_column_list"/> FROM b_member_identity_approve WHERE site_id=#{siteId} AND member_id=#{memberId}
    </select>

    <select id="getLstBySiteId" parameterType="Map" resultMap="BaseResultMap">
        SELECT a.*, m.mobile AS mobile, m.member_id reMemberId, n.avatar FROM b_member_identity_approve a
        LEFT JOIN b_member m ON m.buyer_id=a.member_id AND m.site_id=a.site_id
        LEFT JOIN b_member_info n ON n.member_id=a.member_id AND a.site_id=n.site_id
        <where>
            <if test="1==1">
                AND a.site_id=#{siteId}
            </if>
            <if test="mobile != null">
                AND m.mobile = #{mobile}
            </if>
            <if test="idcardNumber != null">
                AND a.idcard_number = #{idcardNumber}
            </if>
            <if test="name != null">
                AND a.name LIKE CONCAT('%',#{name},'%')
            </if>
            <if test="type != null">
                AND a.type = #{type}
            </if>
            <if test="status != null">
                AND a.status = #{status}
            </if>
            <if test="bFrom != null and bFrom != '' and status == null ">
                AND (a.status =1 OR a.status =2)
            </if>
            <if test="bFrom == null ">
                AND a.status=0
            </if>
            <if test="begainTime != null and endTime != null">
                AND a.update_time BETWEEN str_to_date(concat(#{begainTime},' 00:00:00'),'%Y-%m-%d %H:%i:%s') AND str_to_date(concat(#{endTime},' 23:59:59'),'%Y-%m-%d %H:%i:%s')
            </if>
        </where>
        ORDER BY update_time DESC
    </select>

    <select id="getNumByType" parameterType="int" resultType="java.util.Map">
        SELECT COUNT(1) AS count,type FROM b_member_identity_approve WHERE site_id=#{siteId} AND `status`=0 AND type is NOT NULL GROUP BY type
    </select>

    <select id="getNumByStatus" parameterType="int" resultType="java.util.Map">
        SELECT COUNT(1) AS count,status FROM b_member_identity_approve WHERE site_id=#{siteId} AND (`status`=1 OR `status`=2) GROUP BY `status`
    </select>


</mapper>
