<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.jk51.modules.persistence.mapper.SBMemberMapper" >

    <select id="findMemberBySiteIdAndMobile" resultType="com.jk51.model.order.SBMember" >
        SELECT  * from b_member
        WHERE
          site_id = #{siteId}
          and
          mobile = #{mobile}
        limit 1
    </select>
    <select id="findRegisterInfo" resultType="java.util.Map">
        SELECT mobile,create_time as create_time
        FROM b_member
        WHERE
          buyer_id = #{member_id}
    </select>
    <select id="getMemberList"  resultType="com.jk51.model.order.SBMember">
        SELECT *
        FROM b_member
        WHERE
          buyer_id = #{userId}
    </select>

    <select id="selectByPhoneNum" resultType="com.jk51.model.order.SBMember">
        select * from b_member where site_id=#{site_id,jdbcType=INTEGER} and mobile=#{mobile,jdbcType=VARCHAR} limit 1
    </select>

    <!--会员列表查询start-->
    <resultMap id="member_list_info" type="java.util.HashMap" autoMapping="true">
        <result column="member_id" ></result>
        <result column="mobile"></result>
        <result column="member_name" property="member_name"></result>
        <result column="create_time"></result>
        <result column="invite_code"></result>
        <result column="invite_name" property="invite_name"></result>
        <result column="last_time"></result>
        <result column="integrate"></result>
        <result column="register_clerks"></result>
        <result column="site_id"></result>
    </resultMap>

    <select id="getOfflineInfo" resultType="java.util.Map">
      SELECT
	    bm.mobile mobile_no,bm.`name`,bm.sex,bmi.birthday,bmi.address,bm.idcard_number certif_no
      FROM
      	b_member bm
      LEFT JOIN b_member_info bmi ON bm.site_id = bmi.site_id
      AND bm.buyer_id = bmi.member_id
      WHERE
    	bm.site_id = #{siteId}
      AND bm.mobile = #{mobile}
    </select>

    <select id="getMemberMapList"  resultType="java.util.Map">

        SELECT A.*,B.inviteCode as invite_code,C.adminName as invite_name FROM
        (SELECT site_id siteId,member_id memberId,mobile,NAME member_name,create_time ,last_time,order_num orderNum,order_fee orderFee,integrate,buyer_id,register_stores,ban_status
        FROM b_member WHERE site_id= #{site_id} ) AS A
        LEFT JOIN
        (SELECT member_id,SUBSTRING_INDEX(invite_code,'_',-1) inviteCode
        FROM b_member_info WHERE site_id= #{site_id}) AS B
        ON A.buyer_id=B.member_id
        LEFT JOIN
        (SELECT SUBSTRING_INDEX(`clerk_invitation_code`,'_',-1) inviteCode,`name` adminName
        FROM b_store_adminext WHERE site_id= #{site_id} and is_del=0 ) AS C
        ON B.inviteCode=C.inviteCode

        <where>

            <if test="mobile != null">
                AND A.mobile = #{mobile}
            </if>
            <if test="date_start != null">
                AND A.create_time <![CDATA[ >= ]]> #{date_start}
            </if>
            <if test="date_end != null">
                AND A.create_time <![CDATA[ <= ]]>  #{date_end}
            </if>
            <if test="invite_code != null">
                AND B.inviteCode = #{invite_code}
            </if>
            <if test="store_id != null">
                AND A.register_stores = #{store_id}
            </if>

        </where>
        GROUP BY A.mobile
        ORDER BY A.create_time  desc,A.member_name DESC
    </select>

    <select id="getMemberCount"  resultType="java.lang.Integer">
        SELECT
        COUNT(1)
        FROM
        --         先左外连接按条件查出一页作为中间表
            (
            SELECT
            b.invite_code,
            a.site_id
            FROM
                --         b_member先左外连接按条件查出一页作为中间表
            (
            SELECT
                site_id,
                register_clerks,
                buyer_id
            FROM b_member
            <where>
                site_id = #{site_id}
                AND
                register_stores = #{store_id}
                <if test="mobile != null">
                    AND mobile = #{mobile}
                </if>
                <if test="date_start != null">
                    AND create_time &gt;= #{date_start}
                </if>
                <if test="date_end != null">
                    AND create_time &lt;  #{date_end}
                </if>
            </where>
            )AS a
        LEFT JOIN b_member_info AS b
        ON a.buyer_id = b.member_id
        AND a.site_id = b.site_id
        <where>
            <if test="invite_code != null">
                AND b.invite_code = #{invite_code}
            </if>
        </where>
        ) m
        LEFT JOIN b_store_adminext AS c
        ON m.invite_code = c.clerk_invitation_code
        AND m.site_id = c.site_id

    </select>
    <select id="getCardNo" resultType="java.util.Map">
        SELECT
	      bmi.membership_number card_no
        FROM
    	b_member bm
        LEFT JOIN b_member_info bmi ON bm.site_id = bmi.site_id
        AND bm.buyer_id = bmi.member_id
        WHERE
      	bm.site_id = #{siteId}
        AND bm.mobile = #{mobile}
    </select>

    <update id="updateIdNum" >
        update b_member
        <set>
            <if test="certif_no!=null" >
                idcard_number =#{certif_no}
            </if>
        </set>
         where site_id =#{siteId} and mobile=#{mobile}
    </update>

    <!--会员列表查询end-->

    <!--会员添加start-->

    <select id="selectByPhoneNumCount" resultType="java.lang.Integer">
        select count(1) from b_member where mobile=#{mobile,jdbcType=VARCHAR} AND site_id = #{site_id}
    </select>

    <insert id="insert" useGeneratedKeys="true" keyProperty="member_id" parameterType="com.jk51.model.order.SBMember">
        <!--
          WARNING - @mbg.generated
          This element is automatically generated by MyBatis Generator, do not modify.
        -->
        insert into b_member (member_id, site_id, buyer_id,
        buyer_nick, mobile, passwd,
        sex, email, idcard_number,
        order_num, order_fee, register_stores,
        register_clerks, name, last_ipaddr,
        integrate, total_get_integrate, total_consume_integrate,
        mem_source, is_activated, ban_status,
        last_time, create_time, update_time,
        memo)
        values (#{member_id,jdbcType=INTEGER}, #{site_id,jdbcType=INTEGER}, #{buyer_id,jdbcType=INTEGER},
        #{buyer_nick,jdbcType=VARCHAR}, #{mobile,jdbcType=VARCHAR}, #{passwd,jdbcType=VARCHAR},
        #{sex,jdbcType=INTEGER}, #{email,jdbcType=VARCHAR}, #{idcard_number,jdbcType=VARCHAR},
        #{order_num,jdbcType=INTEGER}, #{order_fee,jdbcType=INTEGER}, #{register_stores,jdbcType=INTEGER},
        #{register_clerks,jdbcType=BIGINT}, #{name,jdbcType=VARCHAR}, #{last_ipaddr,jdbcType=VARCHAR},
        #{integrate,jdbcType=BIGINT}, #{total_get_integrate,jdbcType=BIGINT}, #{total_consume_integrate,jdbcType=BIGINT},
        #{mem_source,jdbcType=INTEGER}, #{is_activated,jdbcType=TINYINT}, #{ban_status,jdbcType=TINYINT},
        #{last_time,jdbcType=TIMESTAMP}, #{create_time,jdbcType=TIMESTAMP}, #{update_time,jdbcType=TIMESTAMP},
        #{memo,jdbcType=LONGVARCHAR})
    </insert>

    <insert id="insertSelective"  useGeneratedKeys="true"  keyProperty="member_id" parameterType="com.jk51.model.order.SBMember">

        insert into b_member
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="member_id != null">
                member_id,
            </if>
            <if test="site_id != null">
                site_id,
            </if>
            <if test="buyer_id != null">
                buyer_id,
            </if>
            <if test="buyer_nick != null">
                buyer_nick,
            </if>
            <if test="mobile != null">
                mobile,
            </if>
            <if test="passwd != null">
                passwd,
            </if>
            <if test="sex != null">
                sex,
            </if>
            <if test="email != null">
                email,
            </if>
            <if test="idcard_number != null">
                idcard_number,
            </if>
            <if test="order_num != null">
                order_num,
            </if>
            <if test="order_fee!= null">
                order_fee,
            </if>
            <if test="register_stores != null">
                register_stores,
            </if>
            <if test="register_clerks != null">
                register_clerks,
            </if>
            <if test="name != null">
                name,
            </if>
            <if test="last_ipaddr != null">
                last_ipaddr,
            </if>
            <if test="integrate != null">
                integrate,
            </if>
            <if test="total_get_integrate != null">
                total_get_integrate,
            </if>
            <if test="total_consume_integrate != null">
                total_consume_integrate,
            </if>
            <if test="mem_source != null">
                mem_source,
            </if>
            <if test="is_activated != null">
                is_activated,
            </if>
            <if test="ban_status != null">
                ban_status,
            </if>
            <if test="last_time != null">
                last_time,
            </if>
            <if test="memo != null">
                memo,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="member_id != null">
                #{member_id,jdbcType=INTEGER},
            </if>
            <if test="site_id != null">
                #{site_id,jdbcType=INTEGER},
            </if>
            <if test="buyer_id != null">
                #{buyer_id,jdbcType=INTEGER},
            </if>
            <if test="buyer_nick != null">
                #{buyer_nick,jdbcType=VARCHAR},
            </if>
            <if test="mobile != null">
                #{mobile,jdbcType=VARCHAR},
            </if>
            <if test="passwd != null">
                #{passwd,jdbcType=VARCHAR},
            </if>
            <if test="sex != null">
                #{sex,jdbcType=INTEGER},
            </if>
            <if test="email != null">
                #{email,jdbcType=VARCHAR},
            </if>
            <if test="idcard_number != null">
                #{idcard_number,jdbcType=VARCHAR},
            </if>
            <if test="order_num != null">
                #{order_num,jdbcType=INTEGER},
            </if>
            <if test="order_fee!= null">
                #{order_fee,jdbcType=INTEGER},
            </if>
            <if test="register_stores != null">
                #{register_stores,jdbcType=INTEGER},
            </if>
            <if test="register_clerks != null">
                #{register_clerks,jdbcType=BIGINT},
            </if>
            <if test="name != null">
                #{name,jdbcType=VARCHAR},
            </if>
            <if test="last_ipaddr != null">
                #{last_ipaddr,jdbcType=VARCHAR},
            </if>
            <if test="integrate != null">
                #{integrate,jdbcType=BIGINT},
            </if>
            <if test="total_get_integrate != null">
                #{total_get_integrate,jdbcType=BIGINT},
            </if>
            <if test="total_consume_integrate != null">
                #{total_consume_integrate,jdbcType=BIGINT},
            </if>
            <if test="mem_source != null">
                #{mem_source,jdbcType=INTEGER},
            </if>
            <if test="is_activated != null">
                #{is_activated,jdbcType=TINYINT},
            </if>
            <if test="ban_status != null">
                #{ban_status,jdbcType=TINYINT},
            </if>
            <if test="last_time != null">
                #{last_time,jdbcType=TIMESTAMP},
            </if>
            <if test="memo != null">
                #{memo,jdbcType=LONGVARCHAR},
            </if>
        </trim>
    </insert>
    <!--会员添加end-->

    <!--会员更新start-->
    <select id="getMember" resultType="com.jk51.model.order.SBMember">
        SELECT  *
        FROM b_member
        <where>
             member_id = #{member_id} AND site_id = #{site_id} AND register_stores = #{register_stores}
        </where>
    </select>

    <update id="updateLastLoginTime" >
        update b_member set last_time=CURRENT_TIMESTAMP() where site_id=#{siteId,jdbcType=INTEGER} and member_id=#{memberId,jdbcType=INTEGER}
    </update>

    <update id="updateMemberByMemberId" parameterType="com.jk51.model.order.SBMember">

        UPDATE b_member
        <set>
            <if test="buyer_id != null">
                buyer_id = #{buyer_id,jdbcType=INTEGER},
            </if>
            <if test="buyer_nick != null">
                buyer_nick = #{buyer_nick,jdbcType=VARCHAR},
            </if>
            <if test="mobile != null">
                mobile = #{mobile,jdbcType=VARCHAR},
            </if>
            <if test="passwd != null">
                passwd = #{passwd,jdbcType=VARCHAR},
            </if>
            <if test="sex != null">
                sex = #{sex,jdbcType=INTEGER},
            </if>
            <if test="email != null">
                email = #{email,jdbcType=VARCHAR},
            </if>
            <if test="idcard_number != null">
                idcard_number = #{idcard_number,jdbcType=VARCHAR},
            </if>
            <if test="order_num != null">
                order_num = #{order_num,jdbcType=INTEGER},
            </if>
            <if test="order_fee!= null">
                order_fee = #{order_fee,jdbcType=INTEGER},
            </if>
            <if test="register_stores != null">
                register_stores = #{register_stores,jdbcType=INTEGER},
            </if>
            <if test="register_clerks != null">
                register_clerks = #{register_clerks,jdbcType=BIGINT},
            </if>
            <if test="name != null">
                name = #{name,jdbcType=VARCHAR},
            </if>
            <if test="last_ipaddr != null">
                last_ipaddr = #{last_ipaddr,jdbcType=VARCHAR},
            </if>
            <if test="integrate != null">
                integrate = #{integrate,jdbcType=BIGINT},
            </if>
            <if test="total_get_integrate != null">
                total_get_integrate = #{total_get_integrate,jdbcType=BIGINT},
            </if>
            <if test="total_consume_integrate != null">
                total_consume_integrate = #{total_consume_integrate,jdbcType=BIGINT},
            </if>
            <if test="mem_source != null">
                mem_source = #{mem_source,jdbcType=INTEGER},
            </if>
            <if test="is_activated != null">
                is_activated = #{is_activated,jdbcType=TINYINT},
            </if>
            <if test="ban_status != null">
                ban_status = #{ban_status,jdbcType=TINYINT},
            </if>
            <if test="last_time != null">
                last_time = #{last_time,jdbcType=TIMESTAMP},
            </if>
            <if test="memo != null">
                memo = #{memo,jdbcType=LONGVARCHAR},
            </if>
        </set>
        <where>
            member_id = #{member_id} AND site_id = #{site_id}
        </where>

    </update>

    <update id="updateMemberByMemberId1" parameterType="com.jk51.model.order.SBMember">

        UPDATE b_member
        <set>
                sex = #{sex,jdbcType=INTEGER},
                email = #{email,jdbcType=VARCHAR},
                idcard_number = #{idcard_number,jdbcType=VARCHAR},
                <if test="register_stores != null and  register_stores != ''">
                    register_stores = #{register_stores,jdbcType=INTEGER},
                </if>
                <if test="register_clerks != null and  register_clerks != ''">
                    register_clerks = #{register_clerks},
                </if>
                name = #{name,jdbcType=VARCHAR},
                ban_status = #{ban_status,jdbcType=TINYINT},
                memo = #{memo,jdbcType=LONGVARCHAR},
        </set>
        <where>
            member_id = #{member_id} AND site_id = #{site_id}
        </where>

    </update>

    <update id="updateMemberByMemberId2" parameterType="com.jk51.model.order.SBMember">

        UPDATE b_member
        <set>
                sex = #{sex,jdbcType=INTEGER},
                email = #{email,jdbcType=VARCHAR},
                idcard_number = #{idcard_number,jdbcType=VARCHAR},
                name = #{name,jdbcType=VARCHAR},
            <if test="integrate != null">
                integrate = #{integrate,jdbcType=BIGINT},
            </if>
                memo = #{memo,jdbcType=LONGVARCHAR},
        </set>
        <where>
            member_id = #{member_id} AND site_id = #{site_id}
        </where>
    </update>

    <select id="selectAll" resultType="java.util.Map">
        SELECT * FROM b_member
    </select>

    <select id="getOpenId" resultType="java.lang.String">

        SELECT open_id from b_member where site_id = #{siteId} and buyer_id = #{buyerId}
    </select>
    <select id="selectByOpenId" resultType="com.jk51.model.order.SBMember">
        SELECT *
        FROM b_member
        WHERE
        open_id = #{openId} AND site_id = #{siteId} limit 1
    </select>

    <select id="getMembersBByAliUserID" resultType="com.jk51.model.order.SBMember">
        SELECT *
        FROM b_member
        WHERE
        ali_user_id = #{aliUserID} AND site_id = #{siteId} limit 1
    </select>
    <select id="getbMemberAll" resultType="java.lang.Integer">
        SELECT
        count(1)
        FROM b_member
        WHERE site_id=#{siteId}
    </select>


    <select id="getUserAndInfoAndCocernBySiteId" resultType="java.util.Map">
        select m.site_id,m.mobile,m.register_clerks,m.register_stores,m.buyer_id,m.open_id,m.create_time,c.type_pk,mi.invite_code,c.scene_str,c.gzhutime,TIMESTAMPDIFF(MINUTE,m.create_time,c.gzhutime) as ddff
        from b_member m
        INNER JOIN b_member_info mi on mi.member_id = m.buyer_id and m.site_id = mi.site_id
        INNER JOIN (
        select type_pk,site_id,a.open_id,scene_str,create_time as gzhutime
        from b_concern a
        INNER JOIN (
        select open_id,max(create_time) dd from b_concern b where site_id = #{siteId} and type_pk <![CDATA[ <> ]]> 0 GROUP BY open_id
        ) b on a.open_id = b.open_id and a.create_time = b.dd
        ) c on c.open_id = m.open_id and m.site_id = c.site_id
        where m.site_id = #{siteId} and (m.register_clerks = 0 or m.register_stores = 0)
        and DATE(m.create_time) = DATE(c.gzhutime) and TIMESTAMPDIFF(MINUTE,m.create_time,c.gzhutime) <![CDATA[ <= ]]> 60
    </select>

    <update id="updateIdopenId">
        update b_member
        <set>
            <if test="openId!=null">
                open_id =#{openId}
            </if>
        </set>
        where site_id =#{siteId} and mobile=#{mobile}
    </update>
</mapper>
